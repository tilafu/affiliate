name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-24.04
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests (if you have them)
      run: npm test --if-present
    
    - name: Lint code (if you have linting)
      run: npm run lint --if-present

  build-and-deploy:
    needs: test
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/affiliate-app:latest
          ${{ secrets.DOCKER_USERNAME }}/affiliate-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          # Stop existing container
          docker stop affiliate-app || true
          docker rm affiliate-app || true
          
          # Pull latest image
          docker pull ${{ secrets.DOCKER_USERNAME }}/affiliate-app:latest
          
          # Run new container
          docker run -d \
            --name affiliate-app \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            -e DB_HOST=${{ secrets.DB_HOST }} \
            -e DB_USER=${{ secrets.DB_USER }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e DB_NAME=${{ secrets.DB_NAME }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -v /var/log/affiliate-app:/app/logs \
            ${{ secrets.DOCKER_USERNAME }}/affiliate-app:latest
          
          # Clean up old images
          docker image prune -f
